def encode_crc(msg, poly):
    # Append zeros to the message for the polynomial division
    msg += '0' * (len(poly) - 1)
    crc = list(msg)
    for i in range(len(msg) - len(poly) + 1):
        if crc[i] == '1':
            for j in range(len(poly)):
                crc[i + j] = '1' if crc[i + j] != poly[j] else '0'
    
    # The remainder is the last len(poly) - 1 bits of the result
    remainder = ''.join(crc[-(len(poly) - 1):])
    encoded_msg = msg[:-len(poly) + 1] + ' ' + remainder
    return encoded_msg

def decode_crc(rcv, poly):
    crc = list(rcv)
    for i in range(len(rcv) - len(poly) + 1):
        if crc[i] == '1':
            for j in range(len(poly)):
                crc[i + j] = '1' if crc[i + j] != poly[j] else '0'
    
    # The remainder should be all zeros for a valid message
    remainder = ''.join(crc[-(len(poly) - 1):])
    if all(bit == '0' for bit in remainder):
        print(remainder, " remainder is equal to zero")
        return 'No error'
    else:
        print(remainder, " remainder is not equal to zero") 
        return 'Error'

org_sig1 = input()
poly = '100101'
encoded_msg1 = encode_crc(org_sig1, poly)
print(encoded_msg1)

received_sig1 = input()
poly = '100101'
received_sig1 = ''.join(list(map(lambda x: x.strip(), received_sig1.split())))
result1 = decode_crc(received_sig1, poly)
print(result1)
